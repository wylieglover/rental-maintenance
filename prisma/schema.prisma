// prisma/schema.prisma
// ──────────────────────────────────────────────────────────────
// Multi-tenant core + Twilio org numbers + conversation state
// ──────────────────────────────────────────────────────────────

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ────────────────────────  Authentication & Users  ───────────────────────
 */

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts    Account[]
  sessions    Session[]
  memberships OrgMembership[]
  tickets     Ticket[]        @relation("UserTickets")

  // Update these relations to be named
  invitesSent     OrgInvite[] @relation("InvitedBy")
  invitesAccepted OrgInvite[] @relation("AcceptedBy")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/**
 * ────────────────────────  Organization & Multi-tenancy  ───────────────────────
 */

enum Role {
  OWNER
  MANAGER
  STAFF
  TENANT
}

model Organisation {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())

  // optional custom hosts (e.g., acme.com instead of acme.myapp.com)
  domains       Domain[]
  numbers       OrgNumber[] // ← Twilio numbers owned by this org
  conversations Conversation[] // ← SMS/MMS first-time/flow state

  // memberships + data
  members          OrgMembership[]
  properties       Property[]
  tenants          Tenant[]           @relation("OrgTenants")
  tickets          Ticket[]           @relation("OrgTickets")
  OrgInvite        OrgInvite[]
  OrgAccessRequest OrgAccessRequest[]
}

model Domain {
  id             String  @id @default(cuid())
  organisationId String
  host           String  @unique
  verified       Boolean @default(false)

  organisation Organisation @relation(fields: [organisationId], references: [id])

  @@map("domains")
}

model OrgMembership {
  id             String @id @default(cuid())
  userId         String
  organisationId String
  role           Role

  user         User         @relation(fields: [userId], references: [id])
  organisation Organisation @relation(fields: [organisationId], references: [id])

  @@unique([userId, organisationId])
  @@map("org_memberships")
}

model OrgInvite {
  id               String    @id @default(cuid())
  organisationId   String
  email            String
  role             Role      @default(STAFF) // allow MANAGER or STAFF
  token            String    @unique
  createdAt        DateTime  @default(now())
  expiresAt        DateTime
  acceptedAt       DateTime?
  invitedByUserId  String
  acceptedByUserId String? // Add this field

  organisation Organisation @relation(fields: [organisationId], references: [id])
  invitedBy    User         @relation("InvitedBy", fields: [invitedByUserId], references: [id])
  acceptedBy   User?        @relation("AcceptedBy", fields: [acceptedByUserId], references: [id])

  @@index([organisationId, email])
  @@map("org_invites")
}

model OrgAccessRequest {
  id             String       @id @default(cuid())
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
  email          String
  message        String?
  status         String       @default("OPEN") // OPEN | INVITED | DISMISSED
  createdAt      DateTime     @default(now())
  handledAt      DateTime?
  handledById    String?
  inviteId       String?
}

/**
 * ───────────────────────  Telephony & Communication  ───────────────────────
 */

enum ConversationState {
  IDLE // normal flow
  ASK_PROPERTY // waiting for tenant to reply with address/unit
}

model OrgNumber {
  id             String   @id @default(cuid())
  organisationId String
  e164           String   @unique
  twilioSid      String   @unique
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())

  propertyId String?
  property   Property? @relation("PropertyNumbers", fields: [propertyId], references: [id], onDelete: SetNull)

  organisation Organisation @relation(fields: [organisationId], references: [id])

  @@index([organisationId, active])
  @@index([organisationId, propertyId])
  @@map("org_numbers")
}

model Conversation {
  id             String            @id @default(cuid())
  organisationId String
  phoneNumber    String
  state          ConversationState @default(IDLE)
  tenantId       String?
  propertyId     String?
  lastMessageAt  DateTime          @default(now())

  organisation Organisation @relation(fields: [organisationId], references: [id])
  tenant       Tenant?      @relation(fields: [tenantId], references: [id])
  property     Property?    @relation(fields: [propertyId], references: [id])

  @@unique([organisationId, phoneNumber]) // one thread per sender per org
  @@index([state])
  @@index([lastMessageAt])
  @@map("conversations")
}

/**
 * ────────────────────────  Properties & Tenants  ───────────────────────
 */

model Property {
  id             String   @id @default(cuid())
  organisationId String
  name           String
  address        String
  phoneNumber    String   @unique
  managerId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organisation Organisation   @relation(fields: [organisationId], references: [id])
  tickets      Ticket[]       @relation("PropTickets")
  tenants      Tenant[]       @relation("PropTenants")
  Conversation Conversation[]

  numbers OrgNumber[] @relation("PropertyNumbers")

  @@map("properties")
}

model Tenant {
  id             String   @id @default(cuid())
  organisationId String
  phoneNumber    String
  unitNumber     String?
  name           String?
  propertyId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organisation Organisation   @relation("OrgTenants", fields: [organisationId], references: [id])
  property     Property       @relation("PropTenants", fields: [propertyId], references: [id])
  tickets      Ticket[]       @relation("TenantTickets")
  Conversation Conversation[]

  @@unique([phoneNumber, propertyId]) // same phone may exist in different properties
  @@index([organisationId, createdAt])
  @@index([organisationId, propertyId])
  @@index([organisationId, phoneNumber])
  @@map("tenants")
}

/**
 * ────────────────────────  Tickets & Maintenance  ───────────────────────
 */

enum TicketCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  APPLIANCE
  COSMETIC
  PEST_CONTROL
  SECURITY
  OTHER
  UNKNOWN
}

enum TicketPriority {
  EMERGENCY
  HIGH
  MEDIUM
  LOW
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Ticket {
  id                 String         @id @default(cuid())
  organisationId     String
  description        String?
  category           TicketCategory
  priority           TicketPriority
  status             TicketStatus   @default(OPEN)
  imageUrls          String[]
  tenantId           String
  propertyId         String
  userId             String? // optional owner/assignee
  externalMessageSid String?        @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  organisation Organisation @relation("OrgTickets", fields: [organisationId], references: [id])
  property     Property     @relation("PropTickets", fields: [propertyId], references: [id])
  tenant       Tenant       @relation("TenantTickets", fields: [tenantId], references: [id])
  user         User?        @relation("UserTickets", fields: [userId], references: [id])

  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("tickets")
}
